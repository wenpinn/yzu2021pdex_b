
/**
  * 先定義ccar，接著宣告字串nickname，使其訪問許可權變為private
  * ccar()是建構子、~ccar()是解構子
  * public 繼承，不改變他的訪問許可權
  * 給燈、輪子數量
  * Author 1092010 黃薰儀
  * version 1.0;
  * since 2021-3-12
  */ 

#include <iostream>
#include <string>
using namespace std;
class CCAR {
private: 
string nickname; 
protected: 
int light; 
/** 類別作為function
  */
int wheel;
public:  
CCAR() :light(2) 
{
wheel = 5;
cout << "car's constructor(wheel=" << wheel << ")" << endl;
}
CCAR(string nickname) :light(2)
{
wheel = 5;
this->nickname = nickname;
cout << "car's constructor(nickname=" << nickname << ")" << endl;
}
~CCAR()
{
cout << "car's destructor" << "(" << nickname << ")" << endl;
}
void start()
{
cout << "car's start" << endl;
}
void stop()
{
cout << "car's stop" << endl;
}
void turn()
{
cout << "car's turn" << endl;
}
};
//--------------------------
/**
  * 類別CBMW，繼承CCAR
  * 改變light、wheel數值，與上面程式不大相同
  */ 
class CBMW : public CCAR {
public:
CBMW() { light = 4; wheel = 4; cout << "bmw's constructor" << endl; }
~CBMW() { cout << "bmw's destructor" << endl; }
void Abs()
{
cout << "bmw's abs" << endl;
}
void start()
{
cout << "bmw's start" << endl;
CCAR::start();//scope operator
//CCAR c;
//c.start();
}
};
//-------------------------
/**執行上述副程式:開始、絕對值、結束
  */ 
int main(int argc, const char * argv[]) {
CBMW bmw;
// bmw.light=3;
bmw.start();
bmw.Abs();
bmw.stop();

return 0;
}
